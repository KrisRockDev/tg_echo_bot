
# –≠—Ç–æ —ç—Ö–æ-–±–æ—Ç.
# –û–Ω –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ª—é–±—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import executor  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

API_TOKEN = 'BOT TOKEN HERE'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã `/start` –∏–ª–∏ `/help`.
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –≠—Ö–æ–ë–æ—Ç!\n–†–∞–±–æ—Ç–∞—é –Ω–∞ aiogram.")


@dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cats(message: types.Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ–≤, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "cat" –∏–ª–∏ "puss".
    """
    try:
        with open('data/cats.jpg', 'rb') as photo:
            await bot.send_photo(
                message.chat.id, photo, caption='–ö–æ—Ç—ã –∑–¥–µ—Å—å üò∫',
                reply_to_message_id=message.message_id
            )
    except FileNotFoundError:
        await message.reply("–§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message_handler()
async def echo(message: types.Message):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await bot.send_message(message.chat.id, message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)